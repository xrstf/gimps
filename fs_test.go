package main

import (
	"fmt"
	"strings"
	"testing"
)

func TestDefaultExcludeFilterAgainstFilenames(t *testing.T) {
	testcases := []struct {
		filename string
		expected bool
	}{
		{
			filename: "main.go",
			expected: false,
		},
		{
			filename: "zz_generated.deepcopy.go",
			expected: true,
		},
		{
			filename: "zz_generated.go",
			expected: true,
		},
		{
			filename: "generated.pb.go",
			expected: true,
		},
	}

	for _, tt := range testcases {
		t.Run(tt.filename, func(t *testing.T) {
			skipped := isSkipped(tt.filename, defaultExcludes)
			if skipped != tt.expected {
				t.Errorf("Expected %v but got %v", tt.expected, skipped)
			}

			tt.filename = "pkg/" + tt.filename

			skipped = isSkipped(tt.filename, defaultExcludes)
			if skipped != tt.expected {
				t.Errorf("Expected %v for %q, but got %v", tt.expected, tt.filename, skipped)
			}
		})
	}
}

func TestIsGeneratedCode(t *testing.T) {
	testcases := []struct {
		comment  string
		expected bool
	}{
		{
			comment:  "",
			expected: false,
		},
		{
			comment:  "// This file has been generated.",
			expected: true,
		},
		{
			comment:  "// Code generated by MockGen. DO NOT EDIT.",
			expected: true,
		},
		{
			comment:  "// Code generated by generate-imagename-constants.sh. DO NOT EDIT.",
			expected: true,
		},
		{
			comment:  "// This file has been generated with Velero v1.5.3. Do not edit.",
			expected: true,
		},
	}

	for i, tt := range testcases {
		code := fmt.Sprintf(`
%s
package main

func main() {

}
`, tt.comment)
		t.Run(fmt.Sprintf("#%d vanilla", i+1), runGeneratedCodeTest(code, tt.expected))

		code = fmt.Sprintf(`
// +build foo

%s

package main

func main() {

}
`, tt.comment)
		t.Run(fmt.Sprintf("#%d with build constraint", i+1), runGeneratedCodeTest(code, tt.expected))

		code = fmt.Sprintf(`
// +build foo
/*
 I am a license header.
*/

%s

package main

func main() {

}
`, tt.comment)
		t.Run(fmt.Sprintf("#%d with build constraint and license header", i+1), runGeneratedCodeTest(code, tt.expected))

		code = fmt.Sprintf(`
// +build foo
/*
 I am a license header.
*/

package main

%s

func main() {

}
`, tt.comment)
		t.Run(fmt.Sprintf("#%d, but too late, so ignore it", i+1), runGeneratedCodeTest(code, false))
	}
}

func runGeneratedCodeTest(code string, expected bool) func(t *testing.T) {
	return func(t *testing.T) {
		b := []byte(strings.TrimSpace(code))

		generated, err := isGeneratedCode(b)
		if err != nil {
			t.Errorf("should not have errored, but got %v", err)
		}

		if generated != expected {
			t.Errorf("Expected %v but got %v", expected, generated)
		}
	}
}
